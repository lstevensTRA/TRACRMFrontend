<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Upload IRS Transcript</title>
  <style>
    :root {
      --neutral-light: #f3f2f1;
      --neutral-lighter: #edebe9;
      --neutral-dark: #201f1e;
      --neutral-primary: #323130;
      --theme-primary: #0078d4;
      --theme-dark: #005a9e;
      --font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      font-family: var(--font-family);
      background-color: white;
      padding: 10px;
      font-size: 14px;
      color: var(--neutral-primary);
    }

    h3 {
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 20px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    label {
      display: block;
      font-weight: 600;
      margin-bottom: 6px;
    }

    input[type="file"], select {
      display: block;
      width: 100%;
      padding: 8px;
      border: 1px solid var(--neutral-lighter);
      border-radius: 4px;
      background-color: var(--neutral-light);
    }

    .conversion-options {
      display: none;
      margin-top: 10px;
    }

    .conversion-options label {
      font-weight: normal;
    }

    .footer {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 30px;
    }

    .btn {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: 600;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s ease;
      border: none;
    }

    .btn-primary {
      background-color: var(--theme-primary);
      color: white;
    }

    .btn-primary:hover {
      background-color: var(--theme-dark);
    }

    .btn-secondary {
      background-color: var(--neutral-light);
      color: var(--neutral-dark);
      border: 1px solid var(--neutral-lighter);
    }

    .btn-secondary:hover {
      background-color: var(--neutral-lighter);
    }
  </style>
</head>
<body onload="onload()">
  <div class="form-group">
    <label for="folderType">Select Folder: <span style="color: red">*</span></label>
    <select id="folderType">
      <option value="" disabled selected>--Select Folder--</option>
      <option value="2848 Form">2848 Form</option>
      <option value="8821 Form">8821 Form</option>
      <option value="Contract Agreement">Contract Agreement</option>
      <option value="IRS Transcript">IRS Transcript</option>
      <option value="THS Transcript">THS Transcript</option>
      <option value="Other Documents">Other Documents</option>
    </select>

    <label for="fileUpload">Select a file (PDF, Word, HTML):  <span style="color: red">*</span></label>
    <input type="file" id="fileUpload" accept=".pdf,.doc,.docx,.html,.htm" />
  </div>

  <div class="form-group conversion-options" id="conversionOptions">
    <label><input type="checkbox" id="convertToPdfCheckbox" /> Convert HTML to PDF</label>
  </div>

  <div id="uploadMessage" style="display:none; margin-bottom: 10px;"></div>

  <div class="footer">
    <button class="btn btn-primary" id="btnUpload">Upload</button>
    <button class="btn btn-secondary" onclick="window.close()">Cancel</button>
  </div>

  <!-- JS Libraries -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
  <script src="https://unpkg.com/html-docx-js/dist/html-docx.min.js"></script>
  <script src="../../ClientGlobalContext.js.aspx" type="text/javascript"></script>
  
  <script>
  let rawCaseNameID = "";
  let currentUserId = "";
  let entityName = "";

  const folderOptions = {
    opportunity: [
      "2848 Form",
      "8821 Form",
      "Contract Agreement",
      "Other Documents"
    ],
    case: [
      "2848 Form",
      "8821 Form",
      "Contract Agreement",
      "IRS Transcript",
      "THS Transcript",
      "Other Documents"
    ]
  };

  function onload() {
    const queryParams = new URLSearchParams(window.location.search);
    const data = queryParams.get("data");

    try {
      const parsed = data ? JSON.parse(decodeURIComponent(data)) : null;
      rawCaseNameID = parsed?.rawCaseNameID;
      currentUserId = parsed?.currentUserId;
      entityName = parsed?.entityName?.toLowerCase();

      if (!rawCaseNameID || !currentUserId || !entityName) {
        throw new Error("Missing required values");
      }

      populateFolderOptions(entityName);
    } catch (e) {
      console.error("Invalid or missing data format passed from parent context.", e);
    }
  }

  function populateFolderOptions(entity) {
    const select = document.getElementById("folderType");
    select.innerHTML = `<option value="" disabled selected>--Select Folder--</option>`;

    const options = folderOptions[entity] || [];
    options.forEach(folder => {
      const option = document.createElement("option");
      option.value = folder;
      option.textContent = folder;
      select.appendChild(option);
    });
  }


    const folderType = document.getElementById("folderType");
    const fileUpload = document.getElementById("fileUpload");
    const conversionOptions = document.getElementById("conversionOptions");
    const convertToPdfCheckbox = document.getElementById("convertToPdfCheckbox");
    const uploadMessage = document.getElementById("uploadMessage");
    const submitButton = document.getElementById("btnUpload");

    fileUpload.addEventListener("change", function () {
      const file = fileUpload.files[0];
      if (file && file.name.toLowerCase().endsWith(".html")) {
        conversionOptions.style.display = "block";
      } else {
        conversionOptions.style.display = "none";
        convertToPdfCheckbox.checked = false;
      }
    });

    function showUploadMessage(message, type = "error") {
      uploadMessage.style.display = "block";
      uploadMessage.style.padding = "10px";
      uploadMessage.style.borderRadius = "4px";
      uploadMessage.style.marginBottom = "10px";
      uploadMessage.style.color = type === "error" ? "#721c24" : "#155724";
      uploadMessage.style.backgroundColor = type === "error" ? "#f8d7da" : "#d4edda";
      uploadMessage.style.border = type === "error" ? "1px solid #f5c6cb" : "1px solid #c3e6cb";
      uploadMessage.innerText = message;

      submitButton.disabled = false;
      submitButton.style.opacity = 1;
      submitButton.style.cursor = "pointer";
    }

    function showLoadingMessage() {
      uploadMessage.style.display = "block";
      uploadMessage.style.padding = "10px";
      uploadMessage.style.borderRadius = "4px";
      uploadMessage.style.marginBottom = "10px";
      uploadMessage.style.color = "#0c5460";
      uploadMessage.style.backgroundColor = "#d1ecf1";
      uploadMessage.style.border = "1px solid #bee5eb";
      uploadMessage.innerText = "Uploading... Please wait.";

      submitButton.disabled = true;
      submitButton.style.opacity = 0.6;
      submitButton.style.cursor = "not-allowed";
    }

    function clearUploadMessage() {
      uploadMessage.style.display = "none";
      uploadMessage.innerText = "";
      submitButton.disabled = false;
      submitButton.style.opacity = 1;
      submitButton.style.cursor = "pointer";
    }

    submitButton.addEventListener("click", async function () {
      clearUploadMessage();

      if (folderType.value === "") {
        showUploadMessage("Please select a Folder Type.");
        return;
      }

      const file = fileUpload.files[0];
      if (!file) {
        showUploadMessage("Please select a file.");
        return;
      }

      const allowedExtensions = [".html", ".htm", ".pdf", ".doc", ".docx"];
      const fileName = file.name.toLowerCase();
      const isValid = allowedExtensions.some(ext => fileName.endsWith(ext));
      if (!isValid) {
        fileUpload.value = "";
        conversionOptions.style.display = "none";
        showUploadMessage("Only HTML, PDF, or Word files are allowed.");
        return;
      }

      const base64 = await readFileAsBase64(file);
      const context = window.parent.Xrm.Utility.getGlobalContext();
      const userName = context.userSettings.userName || "";
      const userEmail = context.userSettings.userEmail || "";

      const payload = {
        FileName: file.name,
        UserEmail: userEmail,
        FolderType: folderType.value,
        UserName: userName,
        FileBase64: base64,
        SharePointFolderName: rawCaseNameID,
        SPFullPath: "",
        EntityName: "opportunity",
        ConvertToPDF: convertToPdfCheckbox.checked
      };

      try {
        showLoadingMessage();

        const response = await fetch("https://prod-164.westus.logic.azure.com:443/workflows/6e97369adabf42d3a5cdd02f577154aa/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=tGHNfqb0ZZwyD7aZ_ainbKiJM8NsZiVGg2ScVs8u4rQ", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload)
        });

        if (!response.ok) throw new Error("Flow failed");

        showUploadMessage("File submitted successfully.", "success");

        setTimeout(() => {
          const formContext = window.parent.Xrm.Page || window.parent.Xrm.FormContext;
          if (formContext?.data?.refresh) {
            formContext.data.refresh();
          }
          window.close();
        }, 1500);

      } catch (error) {
        console.error("Error submitting file:", error);
        showUploadMessage("Upload failed. Please try again or check console.");
      }
    });

    function readFileAsBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result.split(",")[1]);
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });
    }
  </script>
</body>
</html>
